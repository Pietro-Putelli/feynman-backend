// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -source=provider.go -destination=./provider_mock.go -package=auth
//

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	domain "github.com/pietro-putelli/feynman-backend/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockThirdPartyProvider is a mock of ThirdPartyProvider interface.
type MockThirdPartyProvider struct {
	ctrl     *gomock.Controller
	recorder *MockThirdPartyProviderMockRecorder
}

// MockThirdPartyProviderMockRecorder is the mock recorder for MockThirdPartyProvider.
type MockThirdPartyProviderMockRecorder struct {
	mock *MockThirdPartyProvider
}

// NewMockThirdPartyProvider creates a new mock instance.
func NewMockThirdPartyProvider(ctrl *gomock.Controller) *MockThirdPartyProvider {
	mock := &MockThirdPartyProvider{ctrl: ctrl}
	mock.recorder = &MockThirdPartyProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThirdPartyProvider) EXPECT() *MockThirdPartyProviderMockRecorder {
	return m.recorder
}

// ValidateToken mocks base method.
func (m *MockThirdPartyProvider) ValidateToken(auth *domain.AuthTokenBody) (*domain.ThirdPartyUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", auth)
	ret0, _ := ret[0].(*domain.ThirdPartyUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockThirdPartyProviderMockRecorder) ValidateToken(auth any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockThirdPartyProvider)(nil).ValidateToken), auth)
}
